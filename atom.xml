<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kudaompq的博客</title>
  
  <subtitle>Kudaompq</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-17T14:43:55.620Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kudaompq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/01/17/Python%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/01/17/Python%E5%9F%BA%E7%A1%80/</id>
    <published>2021-01-17T14:11:57.185Z</published>
    <updated>2021-01-17T14:43:55.620Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="Python基础语法"><a href="#Python基础语法" class="headerlink" title="Python基础语法"></a>Python基础语法</h2><h1 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Print函数"><a href="#Print函数" class="headerlink" title="Print函数"></a>Print函数</h3><blockquote><p>默认换行输出</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#输出到文件中</span><br><span class="line">fp &#x3D; (&#39;文件地址&#39;,a+) #如果文件不存在就创建，存在就在文件内容后面追加 </span><br><span class="line">print(&#39;文件内容&#39;,file &#x3D; fp) </span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><blockquote><p>以\t为结尾不换行print(,end = ‘\t’)</p><p>字符和变量一起输出的时候可以用      <strong>,</strong>      连接</p></blockquote><hr><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><blockquote><p>\t：占思维如果已经有 n 位了就输出 4 - n 个空格</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&#39;hello\tworld&#39;)</span><br><span class="line">&#x2F;&#x2F;运行结果</span><br><span class="line">hello   tword</span><br></pre></td></tr></table></figure><ul><li><strong>\b</strong>：回退一格</li></ul><hr><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>**type()**：用来查询对象类型</p><p><strong>isinstance</strong>(a,b):判断子类父类是否相同</p><ol><li><p>Number 数字 // 不可变</p><ol><li><p>int</p><ul><li>0b:二级制</li><li>0o:八进制</li><li>0x:十六进制</li></ul></li><li><p>bool</p><ul><li>True</li><li>False</li></ul></li><li><p>float</p><ul><li><p>浮点数存储不精确</p></li><li><p>精确计算方法</p><ul><li><pre><code>from decimal import Decimalprint(Decimal(&#39;1.1&#39;) + Decimal(&#39;2.2&#39;))<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">          </span><br><span class="line">          </span><br><span class="line">      </span><br><span class="line">   4. complex 复数</span><br><span class="line">   </span><br><span class="line">2. str字符串 &#x2F;&#x2F;不可变</span><br><span class="line">   - 使用‘’或者”“不支持直接换行</span><br><span class="line">   - 使用&#39;&#39;&#39;&#39;&#39;&#39;或者&quot;&quot;&quot;&quot;&quot;输出保留字符串原来的格式</span><br><span class="line">   </span><br><span class="line">3. List列表</span><br><span class="line"></span><br><span class="line">4. Tuple元组    &#x2F;&#x2F;元组</span><br><span class="line"></span><br><span class="line">5. Set   集合</span><br><span class="line"></span><br><span class="line">6. Dictionary  字典</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 强制类型转换</span><br><span class="line"></span><br><span class="line">1. 输出**str型和int型**时需要把int转换成str型 使用str()</span><br><span class="line">2. 基本方法</span><br><span class="line">   1. int()</span><br><span class="line">       1. float型转int型就是去掉小数位</span><br><span class="line">       2. str型转int型就是Integer.parseInt **字符串必须为数字串**</span><br><span class="line">   2. str()</span><br><span class="line">       1. 将其他类型转换成字符串型</span><br><span class="line">   3. float()</span><br><span class="line">       1. int转float就是后面加个.0</span><br><span class="line">       2. str型转float就是把字符串转换成相应的float</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 注释</span><br><span class="line"></span><br><span class="line">注释</span><br><span class="line">单行注释 #</span><br><span class="line">多行注释 &#39;&#39;&#39;&#39;&#39;&#39; 或者 &quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">可以使用</span><br><span class="line"></span><br></pre></td></tr></table></figure>coding:要改变的存储格式     默认UTF-8<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### input()函数</span><br><span class="line"></span><br><span class="line">**基础语法**</span><br><span class="line"></span><br></pre></td></tr></table></figure>name = input(&#39;你的名字&#39;)变量名 = input(&#39;提示语句&#39;)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意：输入的都是**str型**</span><br><span class="line">如果要运算需要强制类型转换</span><br></pre></td></tr></table></figure>name = input(&#39;你的名字&#39;)age = int(input(&#39;age&#39;))<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 运算符</span><br><span class="line"></span><br><span class="line">1. **算数运算符**</span><br><span class="line">1. 乘方  2 ** 3 2的3次方</span><br><span class="line">    2. 整除 2 &#x2F;&#x2F; 4  取 0</span><br><span class="line">        1. 一正一负数向下取整</span><br><span class="line">    3. % 取余</span><br><span class="line">        1. 一正一负的情况下：余数 &#x3D; 被除数 - 除数 * 商</span><br><span class="line">    4. &#x2F; 除号</span><br><span class="line">    5. *乘</span><br><span class="line">    6. +加</span><br><span class="line">    7. -减</span><br><span class="line">    </span><br><span class="line">2. **赋值运算符**</span><br><span class="line">     1. 链式赋值   a &#x3D; b &#x3D; c &#x3D; 20 </span><br><span class="line">     2. 参数赋值</span><br><span class="line">         1. +&#x3D; 相当于 a &#x3D; a + 10</span><br><span class="line">         2. -&#x3D;</span><br><span class="line">         3. *&#x3D;</span><br><span class="line">         4. &#x2F;&#x3D;</span><br><span class="line">         5. &#x2F;&#x2F;&#x3D;</span><br><span class="line">         6. %&#x3D;</span><br><span class="line"></span><br><span class="line">3. **解包赋值**</span><br><span class="line">    1. a,b,c &#x3D; 10,15,&#39;name&#39; </span><br><span class="line">    2. 左右两端个数必须相同</span><br><span class="line">    3. **交换的方法**  a,b &#x3D; b,a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. **比较运算符**</span><br><span class="line">   </span><br><span class="line">    1. 返回结果为True or False</span><br><span class="line">    2.  基本比较运算符</span><br><span class="line">        1. \&gt;</span><br><span class="line">        2. &lt;</span><br><span class="line">        3. \&gt;&#x3D;</span><br><span class="line">        4. &lt;&#x3D;</span><br><span class="line">        5. &#x3D;&#x3D;</span><br><span class="line">    3. 比较两个对象的值            比较value</span><br><span class="line">    4. 比较两个对象的标识使用**is**          比较id</span><br><span class="line">    </span><br><span class="line">5. is not    比较两个对象是否不相等</span><br><span class="line">   </span><br><span class="line">5. **布尔运算符**</span><br><span class="line">   </span><br><span class="line">    1. and   与</span><br><span class="line">    2. or     或</span><br><span class="line">    3. not   非</span><br><span class="line">    4. in  与 not in</span><br><span class="line">        1. 判断是否存在在一个变量中</span><br><span class="line">    </span><br><span class="line">6. **位运算符**</span><br><span class="line">   </span><br><span class="line">    1. 将数据转成二进制再进行运算</span><br><span class="line">    2. 四种运算符</span><br><span class="line">        1. &amp; 按位与 对应数位都为1则为1</span><br><span class="line">        2. | 按位或 对应数位有一个为1 则为1</span><br><span class="line">        3. &lt;&lt; 向左移位    溢出丢弃补0</span><br><span class="line">        4. \&gt;&gt;向右移位，溢出丢弃补0</span><br><span class="line">    </span><br><span class="line">7. **运算符的优先级**</span><br><span class="line"></span><br><span class="line">    ![](..&#x2F;..&#x2F;themes&#x2F;hexo-theme-butterfly&#x2F;source&#x2F;img&#x2F;python基础&#x2F;0.png)</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### Python一切皆对象</span><br><span class="line"></span><br><span class="line">每个对象都有一个布尔值</span><br><span class="line">获取布尔值使用内置函数**bool()**</span><br><span class="line">下列布尔值为False</span><br><span class="line"></span><br><span class="line">1. False</span><br><span class="line">2. 数值0</span><br><span class="line">3. None</span><br><span class="line">4. 空字符串</span><br><span class="line">5. 空列表</span><br><span class="line">6. 空元组</span><br><span class="line">7. 空列表</span><br><span class="line">8. 空集合</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 流程控制结构</span><br><span class="line"></span><br><span class="line">### 三种结构</span><br><span class="line"></span><br><span class="line">1. 顺序结构</span><br><span class="line">2. 选择结构</span><br><span class="line">3. 循环结构</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 选择结构</span><br><span class="line"></span><br><span class="line">**允许嵌套使用if语句**</span><br><span class="line"></span><br></pre></td></tr></table></figure>if 条件表达式:条件执行体<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">if 条件表达式：</span><br><span class="line">    条件执行体1</span><br><span class="line">else：</span><br><span class="line">    条件执行体2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if 条件表达式：</span><br><span class="line">    条件执行体1</span><br><span class="line">elif 条件表达式：</span><br><span class="line">    条件执行体2</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">else：</span><br><span class="line">    条件表达式n；</span><br></pre></td></tr></table></figure>条件表达式</code></pre></li></ul></li></ul></li></ol></li></ol><blockquote><p>x if  判断语句 else y</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#如果True返回x 否则返回Y</span><br><span class="line">num1 &#x3D; 20</span><br><span class="line">num2 &#x3D; 40</span><br><span class="line">ans &#x3D; num1 </span><br><span class="line">if num1 &gt; num2 else num2</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><hr><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ol><li><strong>内置函数range()</strong><pre><code> 返回的是一个迭代器对象 方法一. range(n)      表示从0 - n-1 方法二. range(i，n)       表示从i - n-1 方法三. range(i,n,step)    表示从i开始到n-1步长为step </code></pre><ol start="2"><li><strong>while循环</strong><br> while 条件表达式:<pre><code> 循环体</code></pre></li><li><strong>for-in循环</strong><br> for 自定义的变量 in 可迭代对象<pre><code> 循环体</code></pre></li></ol></li></ol><ol start="4"><li><p><strong>break</strong></p><ol><li>跳出循环</li></ol></li><li><p><strong>continue</strong></p><ol><li>结束当前循环进入下一循环</li></ol></li><li><p><strong>else</strong></p><ol><li>循环正常结束才会执行的语句</li><li>for 自定义的变量 in 可迭代对象:<pre><code> 循环体</code></pre> else:<pre><code> 执行语句</code></pre></li><li>while 条件表达式:<pre><code>循环体</code></pre>else:<pre><code>执行语句</code></pre></li></ol></li></ol><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><blockquote><p>相当于数组</p><p>可以存储不同数据类型</p></blockquote><h3 id="列表的创建"><a href="#列表的创建" class="headerlink" title="列表的创建"></a>列表的创建</h3><ol><li>lst = [元素1,元素2]</li><li>使用内置函数list<ul><li>列表名 = list([变量1,变量2,…])</li></ul></li><li>空列表创建<ol><li>list = []</li><li>list = list()</li></ol></li></ol><hr><h3 id="列表的特点"><a href="#列表的特点" class="headerlink" title="列表的特点"></a>列表的特点</h3><ol><li>列表元素按顺序有序排列</li><li>索引映射唯一一个数据</li><li>列表可以存储重复数据</li><li>任意数据类型混存</li><li>根据需要动态分配和回收内存</li></ol><hr><h3 id="列表的查询操作"><a href="#列表的查询操作" class="headerlink" title="列表的查询操作"></a>列表的查询操作</h3><ul><li><p>index(查找内容) :查找元素的指定元素的索引</p><ul><li>如果有多个相同元素只返回第一个的索引</li><li>如果索引不存在就回抛出ValueError</li><li>可以在指定的start和stop之间查找<ul><li>index(查找内容,start,stop)</li></ul></li><li>左包右开</li></ul></li><li><p>获取列表中的单个元素</p><ul><li>正向索引：0 - n-1</li><li>逆向索引：-n - -1</li><li>索引不存储抛出IndexError</li></ul></li><li><p>获取列表中的多个元素：切片操作</p><ul><li><blockquote><p>语法结构：列表名[start : stop : step]</p></blockquote></li><li><p>默认步长为1</p></li><li><p>左闭右开</p></li><li><p>step为正数</p><ul><li>省略start：默认从索引0开始<ul><li>[:stop:step]</li></ul></li><li>省略stop：默认以索引n - 1结束<ul><li>[start::step]</li></ul></li></ul></li><li><p>step为负数</p><ul><li><p>省略start：默认第一个元素为列表最后一个元素</p><ul><li><p>[:stop:step]</p></li><li><pre><code>lis1 = [0,1,2,3,4,5,7,8,9,10]print(lis1)lis2 = lis1[:5:-1]print(lis2)//运行结果[0,1,2,3,4,5,7,8,9,10][10,9,8,7]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">      </span><br><span class="line">- 省略stop：默认最后一个元素是第一个元素</span><br><span class="line">      </span><br><span class="line">     - [start::step]</span><br><span class="line">      </span><br><span class="line">     - &#96;&#96;&#96;</span><br><span class="line">       lis1 &#x3D; [0,1,2,3,4,5,7,8,9,10]</span><br><span class="line">       print(lis1)</span><br><span class="line">       lis2 &#x3D; lis1[5::-1]</span><br><span class="line">       print(lis2)</span><br><span class="line">       </span><br><span class="line">       &#x2F;&#x2F;运行结果</span><br><span class="line">       [0,1,2,3,4,5,7,8,9,10]</span><br><span class="line">       [5,4,3,2,1,0]</span><br></pre></td></tr></table></figure></code></pre></li><li><p>省略start，stop:逆序输出所有</p><pre><code>   - [::-1]</code></pre></li></ul></li></ul></li></ul></li><li><p>判断元素是否在列表里</p><ul><li><p><strong>in</strong> or <strong>not in</strong></p></li><li><p>遍历列表</p><ul><li><pre><code>for i in list<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line"> ### 列表元素的增加操作</span><br><span class="line"></span><br><span class="line">  - &gt; 不改变id</span><br><span class="line"></span><br><span class="line">  - append()：列表末尾添加一个元素</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      list.append(一个元素)</span><br><span class="line">      list.append([多个元素])#多个元素作为一个元素</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><ul><li><p>extend()：在列表末尾至少添加一个元素</p><ul><li><p>```<br>list.extend([多个元素])</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- insert()：在列表任意位置添加一个元素</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      list.insert(插入位置,要插入的值)</span><br></pre></td></tr></table></figure></li><li><p>切片：在列表任意位置至少添加一个元素</p><ul><li><p>```<br>list[要切除的位置] = [要取而代之的值]<br>#例子<br>lis1 = [0,1,2,3,4,5,7,8,9,10]<br>print(lis1)<br>lis2 = [True,False,”Python”]<br>lis1[1:] = [True,False,”Python”]<br>print(lis1)<br>//运行结果<br>[0,1,2,3,4,5,7,8,9,10]<br>[0,True,False,’Python‘]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 列表元素的删除操作</span><br><span class="line"></span><br><span class="line">  - remove()</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      list.remove(要删除的值)</span><br></pre></td></tr></table></figure></li><li><p>一次只删除一个元素</p></li><li><p>重复元素只删除第一个</p></li><li><p>元素不存在抛出ValueError</p></li></ul></li><li><p>pop()</p><ul><li>```<br>list.pop(索引位置)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 删除一个指定索引上的元素</span><br><span class="line"></span><br><span class="line">  - 指定索引不存在抛出IndexError</span><br><span class="line"></span><br><span class="line">  - 不指定索引删除最后一个</span><br><span class="line"></span><br><span class="line">- 切片：一次至少删除一个元素</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    list[要删除位置] &#x3D; [] #空列表</span><br></pre></td></tr></table></figure></li><li>只能删除连续的多个元素</li></ul></li><li><p>clear()：清空列表</p><ul><li><pre><code>list.clear()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- del：删除列表</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    del list</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><hr><h3 id="列表元素的修改操作"><a href="#列表元素的修改操作" class="headerlink" title="列表元素的修改操作"></a>列表元素的修改操作</h3><ul><li><p>为指定索引的元素赋予一个新值</p><ul><li><pre><code>list[指定位置] = 修改后的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 为指定的切片赋予一个新值</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    list[指定位置] &#x3D; [修改的值]</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><hr><h3 id="列表的排序操作"><a href="#列表的排序操作" class="headerlink" title="列表的排序操作"></a>列表的排序操作</h3><ul><li><p>sort()</p><ul><li><p>在<strong>原列表</strong>上进行操作</p></li><li><p>默认升序操作</p></li><li><p>```<br>list.sort()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 降序操作</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    list.sort(reverse &#x3D; True)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>sorted()</p><ul><li><p>使用sorted()排序会产生一个<strong>新的列表对象</strong></p><ul><li><pre><code>new_list = sorted(list)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 降序排序</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    new_list &#x3D; sorted(list,reverse &#x3D; True)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>列表生成式</p><ul><li><p>语法格式</p><ul><li><pre><code>new_list = [表达式 for i in 可迭代对象]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 字典</span><br><span class="line"></span><br><span class="line">### 含义</span><br><span class="line"></span><br><span class="line">- 可变序列</span><br><span class="line">- 以键值对的方式存储数据，字典是一个**无序**的序列</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 字典的创建</span><br><span class="line"></span><br><span class="line">- 使用花括号 </span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    scores &#x3D; &#123;&#39;张三&#39; : 40,45:10,44:18&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><ul><li><p>使用内置函数dict()</p><ul><li><pre><code>tudent = dict(name = &#39;jack&#39;,age = 20)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 空字典</span><br><span class="line"></span><br><span class="line">  - 字典名 &#x3D; &#123;&#125;</span><br><span class="line">  - 字典名 &#x3D; dict()</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 字典中元素的获取</span><br><span class="line"></span><br><span class="line">- 使用[]</span><br><span class="line">  - 字典名[key]</span><br><span class="line">  - 不存在会抛出KeyError</span><br><span class="line">- 使用get()方法</span><br><span class="line">  - 字典名.get(key)</span><br><span class="line">  - 如果查找建不存在会输出None</span><br><span class="line">  - get(key,不存在时的value)</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### key的判断</span><br><span class="line"></span><br><span class="line">- in</span><br><span class="line">- not in</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 删除键值对</span><br><span class="line"></span><br><span class="line">- del 字典名[key]</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 清空</span><br><span class="line"></span><br><span class="line">- clear()</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 增加</span><br><span class="line"></span><br><span class="line">- 字典名[new_key] &#x3D; value</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 视图操作</span><br><span class="line"></span><br><span class="line">- keys() ：获取字典当中所有key</span><br><span class="line">  - 可以用list()转换成列表类型</span><br><span class="line">- values()：获取字典中所有value</span><br><span class="line">  - 可以用list()转换成列表类型</span><br><span class="line">- items()：获取字典中所有的键值对</span><br><span class="line">  - 可以用list()转换成列表类型，但是内容是由元组组成</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 字典元素的遍历</span><br><span class="line"></span><br><span class="line">- 遍历所有的键</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    for item in dicts:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><ul><li><p>遍历所有的值</p><ul><li>```<br>for item in dicts:<pre><code>print(item,dicts[item])</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 字典的特点</span><br><span class="line"></span><br><span class="line">1. 所有元素都是一个key-value对，key不允许重复，value可以</span><br><span class="line">2. 字典中的元素是无序的（用hash函数查找）</span><br><span class="line">3. 字典中的key必须是不可变对象</span><br><span class="line">4. 字典中也可以根据需要动态的伸缩</span><br><span class="line">5. 字典会浪费较大的内存，是一种用空间换时间的数据结构</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 字典生成式</span><br><span class="line"></span><br><span class="line">- 内置函数zip（）：</span><br><span class="line"></span><br><span class="line">  - 用于将可迭代的对象作为参数，将对象中对应的元素打包成一个元组，然后返回由这些元组组成的列表</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    items &#x3D; [&#39;Fruits&#39;,&#39;Books&#39;,&#39;Others&#39;]</span><br><span class="line">    prices &#x3D; [97,78,85]</span><br><span class="line">    lst &#x3D; zip(items,prices)</span><br><span class="line">    print(list(lst))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>字典生成式</p><ul><li><pre><code>items = [&#39;Fruits&#39;,&#39;Books&#39;,&#39;Others&#39;]prices = [97,78,85]dic = &#123;item : price for item,price in zip(items,prices)&#125;print(dic)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  items &#x3D; [&#39;Fruits&#39;,&#39;Books&#39;,&#39;Others&#39;]</span><br><span class="line">  prices &#x3D; [97,78,85]</span><br><span class="line">  dic &#x3D; list(zip(items,prices))</span><br><span class="line">  dic &#x3D; dict(dic)</span><br><span class="line">  print(dic)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><hr><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><blockquote><p>相当于不可变的列表</p></blockquote><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a><strong>含义</strong></h3><ol><li>不可变序列<ul><li>不可变序列：字符串、元组<ul><li>没有增删改操作</li></ul></li><li>可变序列：列表、字典<ul><li>可以对序列执行增删改操作，对象地址不发生改变</li></ul></li></ul></li></ol><hr><h3 id="元组的创建方式"><a href="#元组的创建方式" class="headerlink" title="元组的创建方式"></a>元组的创建方式</h3><ul><li>使用（）<ul><li>元组名 = (数据元素,……)</li><li>元组名 = 数据元素，数据元素，…<ul><li>可以省略( )</li></ul></li></ul></li><li>使用内置函数tuple()<ul><li>元组名 = tuple((数据元素))</li></ul></li><li><strong>只包含一个元组的元素需要使用逗号和小括号</strong><ul><li>t = (10,)</li></ul></li><li>空元组的创建方式<ul><li>t = ()</li><li>t = tuple()</li></ul></li></ul><hr><h3 id="为什么要将元组设计成不可变序列"><a href="#为什么要将元组设计成不可变序列" class="headerlink" title="为什么要将元组设计成不可变序列"></a>为什么要将元组设计成不可变序列</h3><ul><li>在多任务的环境下，同时操作对象时不需要加锁</li><li>因此在程序中尽量使用不可变序列</li><li>注意事项：<ul><li>元组中存储的是对象的引用<ul><li>如果元组中对象本身是不可变对象，则不能再引用其他对象</li><li>如果元组中的对象是可变对象，则可变对象的引用不可以改变，但是数据可以改变</li></ul></li></ul></li></ul><hr><h3 id="元组的遍历"><a href="#元组的遍历" class="headerlink" title="元组的遍历"></a>元组的遍历</h3><ul><li><p>元组是可迭代对象，可以使用for in遍历</p></li><li><p>```<br>t = tuple((‘Python’,’hello’,90))<br>for item in t:</p><pre><code>print(item)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 也可以使用索引来遍历</span><br><span class="line"></span><br><span class="line">  - t[索引]</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 集合</span><br><span class="line"></span><br><span class="line">### 含义</span><br><span class="line"></span><br><span class="line">- Pyhon语言提供的内置数据结构</span><br><span class="line">- 属于可变类型的序列</span><br><span class="line">- **集合是没有value的字典**</span><br><span class="line">- 集合中没有重复的元素</span><br><span class="line">- 集合中的元素是无序的</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 集合的创建方式</span><br><span class="line"></span><br><span class="line">- 直接&#123;&#125;</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    s &#x3D; &#123;&#39;Python&#39;,&#39;hello&#39;,90&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用内置函数set()</p><ul><li>```<br>s = set(range(6))<br>将序列转换成set<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 可以将字符串类型拆分</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    s2 &#x3D; set(&quot;Python&quot;)</span><br><span class="line">    print(s2)</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;&#123;&#39;h&#39;, &#39;o&#39;, &#39;n&#39;, &#39;t&#39;, &#39;y&#39;, &#39;P&#39;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>定义一个空集合</p><ul><li><pre><code>s = set(  )<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 集合的判断操作</span><br><span class="line"></span><br><span class="line">- in 或 not in:</span><br><span class="line"></span><br><span class="line">- 判断集合中是否有相应元素存在</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  s &#x3D; &#123;10,20,50&#125;</span><br><span class="line">  print(10 in s)  </span><br><span class="line">  print(40 not in s)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><hr><h3 id="集合的新增操作"><a href="#集合的新增操作" class="headerlink" title="集合的新增操作"></a>集合的新增操作</h3><ul><li><p>add():添加一个数据</p><ul><li><pre><code>s.add(要加入的数据)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- update()：一次至少添加一个元素</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    s.add([] or ())</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><hr><h3 id="集合元素的删除操作"><a href="#集合元素的删除操作" class="headerlink" title="集合元素的删除操作"></a>集合元素的删除操作</h3><ul><li><p>remove():一次删除一个指定元素</p><ul><li>```<br>s.remove(要删除的值)<br>如果要删除的值不存在就回抛出KeyError<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- discard():一次删除一个指定元素，如果指定元素不存在不会抛出异常</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    s.discard(要删除的值)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>pop():随机删除一个元素</p><ul><li>```<br>s.pop()<br>// 不能添加参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- clear():清空</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 集合之间的关系</span><br><span class="line"></span><br><span class="line">- 两个集合是否相等</span><br><span class="line"></span><br><span class="line">  - 使用运算符&#x3D;&#x3D;或！&#x3D;进行判断</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    s1 &#x3D; &#123;1,2,3,4&#125;</span><br><span class="line">    s2 &#x3D; &#123;4.1.3.2&#125;</span><br><span class="line">    print(s1 &#x3D;&#x3D; s2)&#x2F;&#x2F;True</span><br><span class="line">    print(s1 !&#x3D; s2)&#x2F;&#x2F;False</span><br><span class="line">    &#x2F;&#x2F;只要内容相同就是相等，因为集合是无序的</span><br></pre></td></tr></table></figure></li></ul></li><li><p>一个集合是否是另一个集合的子集</p><ul><li><p>使用issubset()判断</p></li><li><p>```<br> s1 = {10,20,30,40,50,60}<br>s2 = {10,20,30,40}<br>s3 = {10,20,90}<br>print(s2.issubset(s1))//True<br>print(s3.issubset(s1))//False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 一个集合是否是另一个集合的超级</span><br><span class="line"></span><br><span class="line">  - 使用issuperset()进行判断</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    s1 &#x3D; &#123;10,20,30,40,50,60&#125;</span><br><span class="line">    s2 &#x3D; &#123;10,20,30,40&#125;</span><br><span class="line">    s3 &#x3D; &#123;10,20,90&#125;</span><br><span class="line">    print(s1.issuperset(s2))&#x2F;&#x2F;True</span><br><span class="line">    print(s1.issuperset(s3))&#x2F;&#x2F;False</span><br></pre></td></tr></table></figure></li></ul></li><li><p>两个集合是否<strong>没有</strong>交集</p><ul><li><p>使用isdisjoint()判断</p></li><li><p>```<br>s1 = {10,20,30,40,50,60}<br>s2 = {10,20,30,40}<br>s3 = {10,20,90}<br>print(s1.isdisjoint(s2))<br>print(s1.isdisjoint(s3))<br>//False<br>//False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 集合的数学操作</span><br><span class="line"></span><br><span class="line">- 交集操作</span><br><span class="line"></span><br><span class="line">  - intersection()</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      s1 &#x3D; &#123;10,20,30,40,50,60&#125;</span><br><span class="line">      s2 &#x3D; &#123;10,20,30,40&#125;</span><br><span class="line">      print(s1.intersection(s2))</span><br><span class="line">      &#x2F;&#x2F;&#123;40, 10, 20, 30&#125;</span><br></pre></td></tr></table></figure></li><li><p>&amp;</p><ul><li>```<br>s1 = {10,20,30,40,50,60}<br>s2 = {10,20,30,40}<br>print(s1 &amp; s2)<br>//{40, 10, 20, 30}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 并集操作</span><br><span class="line"></span><br><span class="line">  - union()</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      s1 &#x3D; &#123;10,20,30,40,50,60&#125;</span><br><span class="line">      s2 &#x3D; &#123;10,20,30,40,100,150&#125;</span><br><span class="line">      print(s1.union(s2))</span><br><span class="line">      &#x2F;&#x2F;&#123;100, 40, 10, 50, 20, 150, 60, 30&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>|</p><ul><li>```<br>s1 = {10,20,30,40,50,60}<br>s2 = {10,20,30,40,100,150}<br>print(s1 | s2)<br>//{100, 40, 10, 50, 20, 150, 60, 30}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 差集操作:</span><br><span class="line"></span><br><span class="line">  &gt; 本质就是第一个集合减去与第二个集合相同的部分</span><br><span class="line"></span><br><span class="line">  - difference()</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      s1 &#x3D; &#123;10,20,30,40,50,60&#125;</span><br><span class="line">      s2 &#x3D; &#123;10,20,30,40,70&#125;</span><br><span class="line">      print(s1.difference(s2))</span><br><span class="line">      &#x2F;&#x2F;&#123;50,60&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>-</p><ul><li><pre><code>s1 = &#123;10,20,30,40,50,60&#125;s2 = &#123;10,20,30,40,70&#125;print(s1-s2)//&#123;50,60&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 对称差集</span><br><span class="line"></span><br><span class="line">  &gt; 本质就是求两个集合除了相同部分以外的的部分</span><br><span class="line">  &gt;</span><br><span class="line">  &gt; 并集 - 交集</span><br><span class="line"></span><br><span class="line">  - symmetric_difference()</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      s1 &#x3D; &#123;10,20,30,40,50,60&#125;</span><br><span class="line">      s2 &#x3D; &#123;10,20,30,40,70&#125;</span><br><span class="line">      print(s1.symmetric_difference(s2))</span><br><span class="line">      &#x2F;&#x2F;&#123;50, 70, 60&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><hr><h3 id="集合生成式"><a href="#集合生成式" class="headerlink" title="集合生成式"></a>集合生成式</h3><ul><li><p>用于生成集合的公式</p><ul><li><pre><code>&#123;i * i for i in range(1,10)&#125;(集合元素表达式 for 自定义变量 in 可迭代对象)//与列表的生成式之间的差别在于[]和&#123; &#125;lst = [ i ** 3 for i in range(10)]print(lst)s = &#123;i ** 3 for i in range(10)&#125;print(s)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 字符串</span><br><span class="line"></span><br><span class="line">&gt; 不可变的字符序列</span><br><span class="line"></span><br><span class="line">### 字符串的驻留机制</span><br><span class="line"></span><br><span class="line">-  不同的值存放在字符串的驻留池中，Python的驻留机制对相同的字符串只保留一份拷贝。</span><br><span class="line"></span><br><span class="line">- 后续创建相同内容的字符串的时，不会开辟新空间，而是把该字符串的地址赋给新创建的变量</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    str1 &#x3D; &quot;Python&quot;</span><br><span class="line">    print(id(str1))</span><br><span class="line">    str2 &#x3D; &#39;Python&#39;</span><br><span class="line">    print(id(str2))</span><br><span class="line">    &#x2F;&#x2F;2571268413808</span><br><span class="line">    &#x2F;&#x2F;2571268413808</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><ul><li><p>驻留机制的情况</p><ul><li>字符串的长度为0或1</li><li>符合标识符的字符串</li><li>字符串只在编译时进行驻留，而非运行时</li><li>[-5，256]之间的整数数字 </li></ul></li><li><p>优缺点</p><ul><li>需要值相同的字符串的时候，可以直接从字符串池中拿来使用，避免频繁的创建和销毁，提升效率和节约内存</li></ul></li><li><blockquote><p>字符串拼接时使用join()比+效率高</p></blockquote></li></ul><hr><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><ol><li>index()<ul><li>查找子串substr第一次出现的位置，如果不存在抛出ValueError</li></ul></li><li>rindex()<ul><li>查找子串substr最后一次出现的位置，如果不存在抛出ValueError</li></ul></li><li>find()<ul><li>查找子串substr第一次出现的位置，如果不存在返回-1</li></ul></li><li>rfind()<ul><li>查找子串substr最后一次出现的位置，如果不存在返回-1</li></ul></li></ol><hr><h3 id="字符串大小写转换操作"><a href="#字符串大小写转换操作" class="headerlink" title="字符串大小写转换操作"></a>字符串大小写转换操作</h3><blockquote><p>转换以后会产生新的字符串对象</p></blockquote><ol><li>upper():<ul><li>把字符串中所有字符都转换成大写</li></ul></li><li>lower()：<ul><li>把字符串中所有字符都转换成小写</li></ul></li><li>swapcase()<ul><li>把字符串中所有大写字母转小写，小写字母转大写</li></ul></li><li>capitalize()：<ul><li>把第一个字符转换成大写，把其余字符转换成小写</li></ul></li><li>title():<ul><li>把每个单词的第一个字符转换成大写，把每个单词的剩余字符转换为小写</li></ul></li></ol><hr><h3 id="字符串内容对齐操作"><a href="#字符串内容对齐操作" class="headerlink" title="字符串内容对齐操作"></a>字符串内容对齐操作</h3><ol><li><p>center()</p><ul><li><p>居中对齐，第一个参数指定宽度，第二个参数指定填充符，填充符默认空格，设置宽度小于实际返回原字符串</p></li><li><p>```<br>str1 = “Python”<br>print(str1.center(10,”*”))<br>//<strong>Python</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ljust()</span><br><span class="line"></span><br><span class="line">   - 左对齐，第一个参数指定宽度，第二个参数指定填充符</span><br><span class="line"></span><br><span class="line">   - &#96;&#96;&#96;</span><br><span class="line">     str1 &#x3D; &quot;Python&quot;</span><br><span class="line">     print(str1.ljust(10,&quot;*&quot;))</span><br><span class="line">     &#x2F;&#x2F;Python****</span><br></pre></td></tr></table></figure></li></ul></li><li><p>rjust()</p><ul><li><p>y右对齐，第一个参数指定宽度，第二个参数指定填充符</p></li><li><pre><code>str1 = &quot;Python&quot;print(str1.rjust(10,&quot;*&quot;))//****Python<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. zfill()</span><br><span class="line"></span><br><span class="line">   - 右对齐，左边用0填充，该方法只接受一个参数</span><br><span class="line"></span><br><span class="line">   - &#96;&#96;&#96;</span><br><span class="line">     str1 &#x3D; &quot;Python&quot;</span><br><span class="line">     print(str1.zfill(10))</span><br><span class="line">     &#x2F;&#x2F;0000Python</span><br><span class="line">     </span><br><span class="line">     str1 &#x3D; &quot;-Python&quot;</span><br><span class="line">     print(str1.zfill(10))</span><br><span class="line">     &#x2F;&#x2F;-000Python</span><br><span class="line">     0是在符号后加</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ol><hr><h3 id="字符串的分割"><a href="#字符串的分割" class="headerlink" title="字符串的分割"></a>字符串的分割</h3><ol><li><p>split()</p><ol><li><p>用于分割字符串，返回一个列表</p></li><li><p>```<br>str1 = “Python Hello World”<br>print(str1.split(sep=” “,maxsplit=1))<br>//[‘Python’, ‘Hello World’]</p><p>sep = 分割的字符<br>maxsplit = 分割的次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. rsplit()</span><br><span class="line"></span><br><span class="line">   1. 从右边开始分割</span><br><span class="line">   2. 使用方法和split一样</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 判断字符串操作</span><br><span class="line"></span><br><span class="line">1. isidentifier() : 判断字符串是不是合法的标识符</span><br><span class="line">2. isspace() : 判断字符串是不是全部用由空白字符组成(回车、换行、水平制表符)</span><br><span class="line">3. isalpha()：判断指定的字符串是否全部由字母组成</span><br><span class="line">4. isdecimal()：判断指定字符串是否全部由十进制的数字组成</span><br><span class="line">   1. 罗马数字，中文数字不算数值 </span><br><span class="line">5. isnumeric()：判断指定的字符串是否全部由数字组成</span><br><span class="line">   1. 罗马数字，中文数字也是数字</span><br><span class="line">6. isalnum()：判断指定字符串是否全部由字母和数字组成</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 字符串其他操作</span><br><span class="line"></span><br><span class="line">1. replace()</span><br><span class="line"></span><br><span class="line">   1. 第一个参数指定被替换的子串</span><br><span class="line"></span><br><span class="line">   2. 第二个参数指定替换的字符串</span><br><span class="line"></span><br><span class="line">   3. 第三个参数指定最大替换次数</span><br><span class="line"></span><br><span class="line">   4. &#96;&#96;&#96;</span><br><span class="line">      str1 &#x3D; &quot;+Python Hello World&quot;</span><br><span class="line">      print(str1.replace(&#39;Python&#39;,&#39;java&#39;))</span><br><span class="line">      </span><br><span class="line">      &#x2F;&#x2F;+java Hello World</span><br></pre></td></tr></table></figure></li></ol></li><li><p>join()</p><ol><li><p>将列表或元组中的字符串合并成一个字符串</p></li><li><pre><code>lis = [&#39;Pyhthon&#39;,&#39;hello&#39;,&#39;world&#39;]print(&#39; &#39;.join(lis))//Pyhthon hello worldprint(&quot; &quot;.join(&quot;python&quot;))//p y t h o n<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 字符串的比较操作</span><br><span class="line"></span><br><span class="line">&gt; 比较规则：从第一个字母开始比较，如果两个字母不相等时，这两个字母的比较结果就是字符串比较的结果</span><br><span class="line">&gt;</span><br><span class="line">&gt; 比较原理：两个字符比较，比较的是ordinal value(原始值)，调用ord函数字得到指定字符的ordinal value，与内置函数ord对应的chr函数，调用内置函数chr时指定ordinal value可以得到对应字符</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 字符串的切片操作</span><br><span class="line"></span><br><span class="line">&gt; 字符串是不可变类型</span><br><span class="line">&gt;</span><br><span class="line">&gt; 切飘操作会产生新的对象</span><br><span class="line"></span><br><span class="line">操作方法和列表相等</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 格式化字符串</span><br><span class="line"></span><br><span class="line">- %作占位符</span><br><span class="line"></span><br><span class="line">  - &gt; n.m  n表示宽度  m表示精度</span><br><span class="line"></span><br><span class="line">  - %s 字符串</span><br><span class="line"></span><br><span class="line">  - %d或i  整数</span><br><span class="line"></span><br><span class="line">    - %10d    10表示宽度</span><br><span class="line"></span><br><span class="line">  - %f 浮点数</span><br><span class="line"></span><br><span class="line">    - %.3f    保留3位小数</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    name &#x3D; &#39;wxy&#39;</span><br><span class="line">    age &#x3D; 500</span><br><span class="line">    print(&quot;名字：%s,今年%d岁了&quot; % (name,age))</span><br></pre></td></tr></table></figure></code></pre></li></ol></li></ol><ul><li><p>{}作占位符</p><ul><li><pre><code>name = &#39;wxy&#39;age = 500print(&quot;名字：&#123;0&#125;,今年&#123;1&#125;岁了&quot;.format(name,age))//0代表第一个数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - &#123;0:.3&#125; 表示一共是三位数</span><br><span class="line"></span><br><span class="line">  - &#123;0: n.m&#125; 同时设置宽度n和精度m</span><br><span class="line"></span><br><span class="line">  - &#123;0:.3f&#125;表示是三位小数</span><br><span class="line"></span><br><span class="line">- f-string</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    name &#x3D; &#39;wxy&#39;</span><br><span class="line">    age &#x3D; 500</span><br><span class="line">    print(f&quot;我叫&#123;name&#125;,今年&#123;age&#125;岁了&quot;)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><hr><h3 id="字符串的编码转换"><a href="#字符串的编码转换" class="headerlink" title="字符串的编码转换"></a>字符串的编码转换</h3><ul><li><p>编码：将字符串转换为二进制数据（bytes）</p><ul><li><p>encode(encoding = ‘文字格式’)</p></li><li><pre><code>print(&#39;天涯共此时&#39;.encode(encoding=&#39;GBK&#39;))<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - GBK一个中文占2字节</span><br><span class="line">    - UTF-8一个中文占3字节</span><br><span class="line"></span><br><span class="line">- 解码：将bytes类型的数据转换成字符串类型</span><br><span class="line"></span><br><span class="line">  - byte.decode(encoding &#x3D; &#39;要转成的格式&#39;)</span><br><span class="line">    - byte代表一个二进制数据（字节类型的数据）</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 函数</span><br><span class="line"></span><br><span class="line">### 函数的创建</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  def 函数名([输入参数]):</span><br><span class="line">  函数体</span><br><span class="line">  [return]</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><hr><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def calc(a,b):</span><br><span class="line">    c &#x3D; a + b</span><br><span class="line">    return c</span><br><span class="line"></span><br><span class="line">print(calc(10,20))</span><br><span class="line">print(calc(b &#x3D; 10 , a &#x3D; 20))  &#x2F;&#x2F;会根据关键字传</span><br></pre></td></tr></table></figure><blockquote><p>在函数中的是形参</p><p>在调用时的参数时实参</p></blockquote><hr><h3 id="函数调用的函数传递"><a href="#函数调用的函数传递" class="headerlink" title="函数调用的函数传递"></a>函数调用的函数传递</h3><ul><li>位置实参<ul><li>根据形参对应的位置进行实参传递</li></ul></li><li>关键字实参<ul><li>根据形参名称进行实参传递</li></ul></li></ul><hr><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><ul><li><p>函数可以没有返回值</p></li><li><p>函数返回一个，直接返回</p></li><li><p>函数返回多个值时，结果为元组</p><ul><li><pre><code>def fun(num):    odd = []    even = []    for i in num:        if i%2:            odd.append(i)        else:            even.append(i)    return odd,even</code></pre></li></ul></li></ul><pre><code>print(fun([10,29,37,22,44,53,55]))//([29, 37, 53, 55], [10, 22, 44])<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 函数的参数定义</span><br><span class="line"></span><br><span class="line">- 函数默认值参数</span><br><span class="line"></span><br><span class="line">  - 函数定义时，给形参设置默认值，只有与默认值不符的时候才需要传送实参</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      def fun(a,b &#x3D; 10):</span><br><span class="line">          print(a+b)</span><br><span class="line">      </span><br><span class="line">      fun(100)</span><br><span class="line">      fun(10,50)</span><br><span class="line">      &#x2F;&#x2F;110</span><br><span class="line">      &#x2F;&#x2F;60</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>个数可变的位置参数</p><ul><li><p>定义函数的时候，可以无法实现确定传递的位置实参的个数时，使用可变的位置参数</p></li><li><p>使用*定义个数可变的位置形参</p></li><li><p>结果为一个元组</p></li><li><p>只能有一个</p></li><li><p>```<br>def fun(*args):</p><pre><code>print(args)</code></pre><p>fun(10)<br>fun(10,100,1000)<br>//(10,)<br>//(10, 100, 1000)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 个数可变的关键字形参</span><br><span class="line"></span><br><span class="line">  - 定义函数时，无法事先确定传递的关键字实参的个数时，使用可变的关键字形参</span><br><span class="line"></span><br><span class="line">  - 使用**定义个数可变的关键字形参</span><br><span class="line"></span><br><span class="line">  - 结果为一个字典</span><br><span class="line"></span><br><span class="line">  - 可变的关键字参数只能有一个</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    def fun(**args):</span><br><span class="line">        print(args)</span><br><span class="line">    </span><br><span class="line">    fun(a &#x3D; 10)</span><br><span class="line">    fun(a &#x3D; 10,b &#x3D; 100,c &#x3D; 1000)</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;&#123;&#39;a&#39;: 10&#125;</span><br><span class="line">    &#x2F;&#x2F;&#123;&#39;a&#39;: 10, &#39;b&#39;: 100, &#39;c&#39;: 1000&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><blockquote><p>在一个函数定义过程中，既有一个可变的关键字形参，也有个数可变的关键字形参，要求个数可变的位置形参，放在个数可变关键字形参的前面</p><p>def fun(*arg1,**arg2 )</p></blockquote></li><li><p><img src="../../themes/hexo-theme-butterfly/source/img/python%E5%9F%BA%E7%A1%80/1.png" alt="avatar"></p></li><li><p>在函数调用的时候，将列表中的每个元素都转换为位置实参传入</p><ul><li><p>```<br>def fun(a,b,c):</p><pre><code>print(&quot;a =&quot;,a)print(&quot;b =&quot;,b)print(&quot;c =&quot;,c)</code></pre><p>lst = [11,22,33]<br>fun(*lst)</p><p>//a = 11<br>b = 22<br>c = 33</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在函数调用的时候，将字典中给的键值对都转换为关键字实参传递</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    def fun(a,b,c):</span><br><span class="line">        print(&quot;a &#x3D;&quot;,a)</span><br><span class="line">        print(&quot;b &#x3D;&quot;,b)</span><br><span class="line">        print(&quot;c &#x3D;&quot;,c)</span><br><span class="line">    </span><br><span class="line">    dic &#x3D; &#123;&#39;a&#39;:111 ,&#39;b&#39;:222 , &#39;c&#39;:333&#125;</span><br><span class="line">    fun(**dic)</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;a &#x3D; 111</span><br><span class="line">    b &#x3D; 222</span><br><span class="line">    c &#x3D; 333</span><br></pre></td></tr></table></figure></li></ul></li><li><p>从*之后的参数，在函数调用时只能采用关键字参数传递</p><ul><li><p>```<br>def fun(a,b,*,c):</p><pre><code>print(&quot;a =&quot;,a)print(&quot;b =&quot;,b)print(&quot;c =&quot;,c)</code></pre><p>fun(10,20,c = 30)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 变量的作用域</span><br><span class="line"></span><br><span class="line">- 程序代码能访问访问该变量的区域</span><br><span class="line">- 根据变量的有效范围可分为</span><br><span class="line">  - 局部变量</span><br><span class="line">    - 在函数内定义并使用的变量，指在函数内部有效</span><br><span class="line">    - 可以使用global声明，这个变量就变成全局变量</span><br><span class="line">  - 全局变量</span><br><span class="line">    - 函数体外定义的变量，可作用于函数内外</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 递归函数</span><br><span class="line"></span><br><span class="line">- 什么是递归函数</span><br><span class="line">  - 如果在一个函数的函数体内调用了该函数本身，这个就是**递归函数**</span><br><span class="line">- 递归的组成部分</span><br><span class="line">  - 递归调用与递归终止条件</span><br><span class="line">- 递归的调用过程</span><br><span class="line">  - 每递归调用一次函数，都会在栈内存分配一个栈帧</span><br><span class="line">  - 每执行完一次函数，都会释放相应的空间</span><br><span class="line">- 递归的优缺点</span><br><span class="line">  - 缺点：占用内存多，效率低下</span><br><span class="line">  - 优点：思路和代码简单</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">##  类</span><br><span class="line"></span><br><span class="line">&gt; 一类相同的事物叫做类，其中用相同的属性描述，里面封装了相同的方法</span><br><span class="line">&gt;</span><br><span class="line">&gt; 一切皆对象 类也是对象 </span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 数据类型</span><br><span class="line"></span><br><span class="line">- 不同的数据类型属于不同类</span><br><span class="line">- 使用内置函数type查看数据类型</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 对象</span><br><span class="line"></span><br><span class="line">- 类的实例化</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 类的创建</span><br><span class="line"></span><br><span class="line">- 创建类的语法</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    class 类名:#类名由一个或多个单词组成，每个单词的首字母大写</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li></ul></li><li><p>类的组成</p><ul><li><p>类属性</p></li><li><p>实例方法</p><ul><li>调用方法<ul><li>对象名.方法名</li><li>类名.方法名(对象名)</li></ul></li></ul></li><li><p>静态方法</p><ul><li>不可以有self</li><li>可以直接用类名调用方法</li><li>类名.方法名()</li><li>对象名.方法名()</li></ul></li><li><p>类方法</p><ul><li>可以使用类名直接访问</li><li>类名.方法名</li><li>对象名.方法名()</li></ul></li><li><p>类属性</p><ul><li><blockquote><p>被所有对象共享</p></blockquote></li><li><p>类名.属性名</p></li><li><p>对象名.属性名</p></li></ul></li></ul></li><li><p>```<br>class Student:</p><pre><code> native_place = &#39;吉林&#39;#类属性 #初始化方法 def __init__(self,name,age):     self.name = name  ##实体属性     self.age = age#实例方法 def eat(self):     print(&#39;干饭&#39;)#静态方法 @staticmethod def method():     print(&quot;静态方法&quot;)#类方法 @classmethod def cm(cls):    print(&quot;类方法&quot;)</code></pre><p>#函数<br>def drink():</p><pre><code>print(&quot;qifei&quot;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 动态绑定属性和方法</span><br><span class="line"></span><br><span class="line">- 动态绑定属性</span><br><span class="line"></span><br><span class="line">  - 对象名.新属性名 &#x3D; value;</span><br><span class="line"></span><br><span class="line">  - 只属于该对象</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      stu1 &#x3D; Student(&quot;wxy&quot;,50)</span><br><span class="line">      stu1.gender &#x3D; &#39;男&#39; &#x2F;&#x2F;动态绑定，不共享</span><br></pre></td></tr></table></figure></li><li><p>动态绑定方法</p><ul><li><p>对象名.方法名 = 方法名</p></li><li><p>只属于该对象的</p></li><li><p>```<br>def show():</p><pre><code>print(&quot;show&quot;)</code></pre><p>stu.show = show<br>stu.show()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 面向对象的三大特征</span><br><span class="line"></span><br><span class="line">### 封装：</span><br><span class="line"></span><br><span class="line">- &gt; 提高程序的安全性</span><br><span class="line"></span><br><span class="line">- Python没有专门的修饰符用于属性的私有，如果该属性不希望在类外被访问，则在属性名前使用两个&quot;_&quot;</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">         def __init__(self,name,age):</span><br><span class="line">             self.name &#x3D; name  ##实体属性</span><br><span class="line">             self.__age &#x3D; age  #设置为私有变量</span><br></pre></td></tr></table></figure></li><li><p>在类的外部可以通过dir()方法找到私有变量再访问</p></li></ul></li></ul><hr><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><ul><li><blockquote><p>提高代码的复用率</p></blockquote></li><li><pre><code>class 子类类名(父类1,父类2)：    pass<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果一个类没有继承任何类，则默认继承object</span><br><span class="line"></span><br><span class="line">- Python支持多继承</span><br><span class="line"></span><br><span class="line">- 定义子类时，必须再其构造函数中调用父类的构造函数</span><br><span class="line"></span><br><span class="line">  - super().\___init\__\_()</span><br><span class="line"></span><br><span class="line">- 方法重写：</span><br><span class="line"></span><br><span class="line">  - 如果子类对继承自父类的某个方法或者属性不满意，可以再子类中对其（方法体）进行重新编写</span><br><span class="line">  - 子类重写后的方法中可以通过super().xxx()调用父类中被重新的方法</span><br><span class="line"></span><br><span class="line">- object类</span><br><span class="line"></span><br><span class="line">  - 所有类的父类，所有类都有object的方法和属性</span><br><span class="line"></span><br><span class="line">  - 内置函数dir()可以查看指定对象所有属性</span><br><span class="line"></span><br><span class="line">  - Object有一个\_\_str\_\_方法，用于返回一个对于“对象的描述”相当于java中的toString</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      def __str__(self):</span><br><span class="line">          return self.name + str(self.age)</span><br></pre></td></tr></table></figure></code></pre></li></ul><hr><h3 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h3><ul><li><blockquote><p>提高程序的可扩展性和可维护性</p></blockquote></li><li><p>多态就是“具有多种形态”，它指的是：即便不知道一个变量所引用的对象到底是什么类型，仍然可以通过这个变量调用方法，在运行过程中根据变量所引用对象的类型，动态决定调用哪个对象中的方法</p></li><li><pre><code>class Animal:    def wuhu(self):        print(&quot;Animal&quot;)class Cat(Animal):    def wuhu(self):        print(&quot;Cat&quot;)class Dog(Animal):    def wuhu(self):        print(&quot;Dog&quot;)</code></pre></li></ul><p>  ani1 = Cat()<br>  ani2 = Dog()<br>  ani1.wuhu()<br>  ani2.wuhu()<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 特殊方法和特殊属性</span><br><span class="line"></span><br><span class="line">- 特殊属性：</span><br><span class="line"></span><br><span class="line">  - \_\_dict\_\_:获得类对象或实例对象所绑定的所有属性和方法</span><br><span class="line">  - \_\_class\_\_：获得对象的类</span><br><span class="line">  - \_\_bases\_\_：获得类的父类</span><br><span class="line">  - \_\_mro\_\_：类的层次结构</span><br><span class="line">  - \_\_subclasses()\_\_:类的子类</span><br><span class="line"></span><br><span class="line">- 特殊方法：</span><br><span class="line"></span><br><span class="line">  - \_\_len\_\_()：通过重写\_\_len\_\_()方法，让内置函数len()的参数可以是自定义类型</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      def __len__(self):</span><br><span class="line">          return len(self.name)</span><br></pre></td></tr></table></figure></p><ul><li><p>__add__():通过重载__add__()方法重载实现两个对象的相加</p><ul><li>```<br>def <strong>add</strong>(self, other):<pre><code>return self.name + other.name</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - \_\_init\_\_()：初始化对象   &#x2F;&#x2F;构造函数</span><br><span class="line"></span><br><span class="line">  - \_\_new\_\_()：</span><br><span class="line"></span><br><span class="line">    - 先执行new再执行init</span><br><span class="line">    - 在new中创建好对象返回到init中的self中![avatar](Python基础.assets&#x2F;2.png)</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 类的赋值和拷贝</span><br><span class="line"></span><br><span class="line">- 变量的赋值操作</span><br><span class="line"></span><br><span class="line">  - 只是形成两个变量，实际上还是指向同一个对象</span><br><span class="line">  - 使用 &#x3D; 进行拷贝的时候实际上就是新增加一个变量，与原变量指向同一个对象</span><br><span class="line"></span><br><span class="line">- 浅拷贝</span><br><span class="line"></span><br><span class="line">  - Python拷贝一般都是浅拷贝，拷贝时，对象包含的子对象内容不拷贝，因此，源对象与拷贝对象会引用同一个子对象</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    import copy</span><br><span class="line">    c1 &#x3D; Cpu()</span><br><span class="line">    c2 &#x3D; Cache()</span><br><span class="line">    com &#x3D; Computer(c1,c2)</span><br><span class="line">    a &#x3D; copy.copy(com)</span><br><span class="line">    print(id(com),id(com.cpu),id(com.cache))</span><br><span class="line">    print(id(a),id(a.cpu),id(a.cache))</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;运行结果</span><br><span class="line">    1686338107136 1686367388768 1686367591008</span><br><span class="line">    1686368317296 1686367388768 1686367591008</span><br><span class="line">    </span><br><span class="line">    仅拷贝对象而不拷贝子对象</span><br></pre></td></tr></table></figure></li></ul></li><li><p>深拷贝</p><ul><li><p>使用copy模块中的deepcopy模块，递归拷贝对象中包含的子对象，源对象和拷贝对象所有的子对象也不相同</p></li><li><p>```</p><p>import copy<br>c1 = Cpu()<br>c2 = Cache()<br>com = Computer(c1,c2)<br>a = copy.deepcopy(com)<br>print(id(com),id(com.cpu),id(com.cache))<br>print(id(a),id(a.cpu),id(a.cache))</p><p>//运行结果<br>2317711734528 2317711918176 2317712124512<br>2317713420928 2317712879184 2317713469296</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 异常处理机制</span><br><span class="line"></span><br><span class="line">&gt; try except结构</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>try:<br>正常执行代码<br>except 异常名:<br>出现异常后执行的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 支持多个except结构</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>try:<br>正常执行的代码<br>except 异常1 as e:<br>出现异常后执行代码<br>print(e)  #可以打印出异常<br>except 异常2:<br>出现异常后执行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; try...except...else</span><br><span class="line">&gt;</span><br><span class="line">&gt; 如果try中没有抛出异常，则执行else块，如果抛出异常则执行except块</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>try:<br>正常执行代码<br>except 异常名:<br>出现异常后执行的代码<br>else:<br>没有出现异常执行的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;当不知道异常名时可以使用Exception</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>捕获异常并打印<br>except Exception as e:<br>print(e)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 常见的异常类型</span><br><span class="line"></span><br><span class="line">- ZeroDivisionError ：除或者取模0</span><br><span class="line">- IndexError：索引越界</span><br><span class="line">- KeyError：映射中没有这个键</span><br><span class="line">- NameError：未声明&#x2F;初始化对象</span><br><span class="line">- SyntaxError：语法错误</span><br><span class="line">- ValueError：传入无效的参数</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### traceback模块</span><br><span class="line"></span><br><span class="line">&gt; 用于打印异常</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>import traceback<br>try:<br>print(10/0)<br>except:<br>traceback.print_exc()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 模块</span><br><span class="line"></span><br><span class="line">### 基本概念</span><br><span class="line"></span><br><span class="line">- Modules</span><br><span class="line">- 函数与模块的关系</span><br><span class="line">  - 一个模块中可以包含多个函数</span><br><span class="line">- 在Python中一个扩展名为.py的文件就是一个模块</span><br><span class="line">- 使用模块的好处</span><br><span class="line">  - 方便其他重新和脚本的导入并使用</span><br><span class="line">  - 避免函数名和变量名冲突</span><br><span class="line">  - 提高代码的可维护性</span><br><span class="line">  - 提高代码的可重用性</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 创建模块</span><br><span class="line"></span><br><span class="line">- 新建一个.py文件，名称尽量不要与Python自带的标准模块名称相同</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 导入模块</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  import 模块名称 [as 别名]</span><br><span class="line">  </span><br><span class="line">  from 模块名称 impor 函数&#x2F;变量&#x2F;类</span><br></pre></td></tr></table></figure></li></ul></li><li><p>导入自定义模块</p><ul><li><pre><code>calc.py文件def add(a,b):    return a+bdef sub(a,b):    return a-btest.py文件import calcprint(calc.add(5,1))//6<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 以主程序形式运行</span><br><span class="line"></span><br><span class="line">- 在每个模块定义中都包含一个记录模块名称的变量\_\_name\_\_,程序可以检查该变量，以确定他们在那个模块中执行。如果一个模块不是被导入到其他程序中执行，那么它看你在解释器的顶级模块中执行。顶级模块的\_\_name\_\_变量值为\_\_main\_\_</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  if __name__ &#x3D; &#39;__main__&#39;</span><br><span class="line">  pass</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><hr><h3 id="python中的包"><a href="#python中的包" class="headerlink" title="python中的包"></a>python中的包</h3><ul><li><p>包是一个分层次的目录结构，它将一组功能相近的模块组织在一个目录下</p></li><li><p>作用：</p><ul><li>代码规范</li><li>避免模块名称冲突</li></ul></li><li><p>包与目录的区别</p><ul><li>包含__init__.py文件的目录称为包</li><li>目录里通常不包含__init__.py文件</li></ul></li><li><p>包的导入</p><ul><li><pre><code>import 包名.模块名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 注意事项</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### Python中常用的内置模块</span><br><span class="line"></span><br><span class="line">- sys:与Python解释器机器环境操作相关的标准库</span><br><span class="line">- time:提供与时间相关的各种函数的标准库</span><br><span class="line">- os：提供了访问操作系统服务功能的标准库</span><br><span class="line">- calendar：提供与日期相关的各种标准库</span><br><span class="line">- urlib：用于读取来自网上（服务器）的数据标准库</span><br><span class="line">- json：用于使用JSON序列化和反序列化对象</span><br><span class="line">- re：用于在字符串中执行正则表达式匹配和替换</span><br><span class="line">- math：提供标准的算术运算函数的标准库</span><br><span class="line">- decimal：用于进行精确控制运算精度、有效位数和四舍五入操作的十进制操作</span><br><span class="line">- logging：提供了灵活的记录事件、错误、警告和调试信息等日志信息的功能</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 文件操作</span><br><span class="line"></span><br><span class="line">### 字符编码</span><br><span class="line"></span><br><span class="line">- Python的解释器使用Unicode（内存）</span><br><span class="line">- .py文件再磁盘上使用UTF-8存储（外存）</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### 文件读写原理</span><br><span class="line"></span><br><span class="line">- 文件的读写俗称“IO操作”</span><br><span class="line"></span><br><span class="line">- 文件读写操作流程</span><br><span class="line"></span><br><span class="line">  - Python操作文件 -&gt; 打开或新建文件 -&gt; 读、写文件 -&gt; 关闭资源</span><br><span class="line"></span><br><span class="line">- 操作原理</span><br><span class="line"></span><br><span class="line">  - 内置函数**open**()创建文件对象</span><br><span class="line"></span><br><span class="line">    - 通过IO流将磁盘文件中的内容与程序中的对象中的内容进行同步</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      file &#x3D; open(filename[,mode,encoding])</span><br><span class="line">      被创建的文件对象 &#x3D; open(要创建或打开的文件名称[,打开模式,encoding默认文本文件中字符的编写格式为gbk])</span><br></pre></td></tr></table></figure>- ```  file = open(&#39;a.txt&#39;,&#39;r&#39;,encoding=&quot;UTF-8&quot;)  print(file.readline())  file.close()  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 常用的文件打开模式</span><br><span class="line"></span><br><span class="line">  - r：只读模式，文件指针放在文件开头</span><br><span class="line"></span><br><span class="line">  - w：只写模式，文件不存在会自动创建，文件指针在文件开头，会覆盖文件原有内容</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      src_file &#x3D; open(&#39;image.jpg&#39;,&#39;rb&#39;)</span><br><span class="line">      target_file &#x3D; open(&#39;copyimage.png&#39;,&#39;wb&#39;)</span><br><span class="line">      target_file.write(src_file.read())</span><br><span class="line">      target_file.close()</span><br><span class="line">      src_file.close()</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><ul><li><p>a：追加模式，文件不存在会自动创建，如有文件存在则在文件末尾追加内容，文件指针在文件末尾，</p></li><li><p>b：以二进制方式打开，不能单独使用，rb，wb</p></li><li><p>+：以读写方式打开，不能单独使用，需要与其他模式一起使用，a+</p></li><li><p>文件对象常用方法</p><ul><li><p>read([size]) ：从文件中读取size个字节或字符的内容返回，省略size表示读取全部</p></li><li><p>readline() : 从文件中读取一行</p></li><li><p>readlines()：把文件中的每一个都作为独立的字符串对象，并将这些对象放入列表返回</p></li><li><p>write(str)：将字符串str内容写入文件</p></li><li><p>writelines(s_list):将字符串列表s_list写入文本文件中，不添加换行符</p></li><li><p>seek[offset[,whence]]:把文件指针移到offset的位置</p><ul><li>whence = 0 : 从文件头开始计算</li><li>whence = 1：从当前位置开始计算</li><li>whence = 2：从文件尾开始计算</li></ul></li><li><p>tell()：返回文件执政的当前位置</p></li><li><p>flush()：把缓冲区的内容写入文件，但不关闭文件</p><ul><li>```<br>file = open(‘a.txt’,’a’)<br>file.write(‘hello’)<br>file.flush()<br>file.write(‘world’)<br>file.close()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">  - close()：把缓冲区的文件写入文件，同时关闭文件，释放文件相关内容</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### with语句（上下文管理器）</span><br><span class="line"></span><br><span class="line">&gt; with语句可以自动管理上下文资源，不论什么原因跳出with块，都能却道文件正确的关闭，以此来达到释放资源的目的</span><br><span class="line"></span><br><span class="line">- 可以不用使用close关闭文件</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  with open(&#39;a.txt&#39;,&#39;r&#39;) as file:</span><br><span class="line">      print(file.read())</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><img src="../../themes/hexo-theme-butterfly/source/img/python%E5%9F%BA%E7%A1%80/2.png"></p></li><li><pre><code>class MyContentMgr(object):    def __enter__(self):        print(&quot;enter方法被执行了&quot;)        return self    def __exit__(self, exc_type, exc_val, exc_tb):        print(&quot;exit方法被执行了&quot;)    def show(self):        print(&quot;show被执行了&quot;)with MyContentMgr() as file:    file.show()//执行结果enter方法被执行了show被执行了exit方法被执行了先调用enter()方法再是实例方法最后调用exit方法（如果有异常exit方法也会执行）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">### os模块</span><br><span class="line"></span><br><span class="line">- **os模块**是python内置的与操作系统功能和文件系统相关的模块，该模块中的语句的执行结果通常与操作系统有关，在不同的操作系统上运行，得到的结果可能不一样</span><br><span class="line"></span><br><span class="line">  - os.system(&quot;&quot;):打开系统工具</span><br><span class="line"></span><br><span class="line">- os模块与os.path模块用于对目录或文件进行操作</span><br><span class="line"></span><br><span class="line">  - getcwd() : 返回当前的工作目录</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;</span><br><span class="line">      os.getcwd()</span><br></pre></td></tr></table></figure>- listdir(path):返回指定路径下的文件和目录信息- mkdir(path[,mode])：创建目录  - ```    os.mkdir(&#39;wxy&#39;)    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- makedirs(path1&#x2F;path2...[,mode]) ：创建多级目录</span><br><span class="line"></span><br><span class="line">- rmdir(path):删除目录</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    os.rmdir(&#39;wxy&#39;)</span><br></pre></td></tr></table></figure>- removedirs(path1/path2...)：删除多级目录- chdir(path):将path设置为当前工作目录- walk(path):递归遍历从当前目录到最后目录的所有内容  - ```    import os    path = os.getcwd()    lst = os.walk(path)    for dirpath,dirname,filename in lst:  #路径，文件夹名，文件名字        print(dirpath)        print(dirname)        print(filename)    ```</code></pre></li></ul><hr><h3 id="os-path模块"><a href="#os-path模块" class="headerlink" title="os.path模块"></a>os.path模块</h3><ul><li>abspath(path)：获取文件或者目录的绝对路径</li><li>exists(path)：用于判断文件或目录是否存在</li><li>join(path,name):将目录与目录或者文件名拼接起来</li><li>splitext()：分离文件名和扩展名</li><li>basename(name):从一个目录中提取文件名</li><li>dirname(name)：从一个路径中提取文件路径，不包括文件名</li><li>isdir(path)：用于判断是否为路径</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/01/17/hello-world/"/>
    <id>http://example.com/2021/01/17/hello-world/</id>
    <published>2021-01-17T02:57:36.570Z</published>
    <updated>2021-01-17T12:26:07.847Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
